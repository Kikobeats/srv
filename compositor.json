{
  "name": "Kikobeats/svr",
  "version": "0.1.4",
  "libraries": {
    "xv": "^1.1.25"
  },
  "title": "",
  "branch": "",
  "style": {
    "name": "Material",
    "componentSet": {
      "nav": "nav/DarkAbsoluteNav",
      "header": "header/GradientHeader",
      "article": "article/BasicArticle",
      "footer": "footer/BasicFooter"
    },
    "fontFamily": "Roboto, sans-serif",
    "heading": {
      "fontWeight": 500,
      "letterSpacing": "-0.01em"
    },
    "colors": {
      "text": "#212121",
      "background": "#fff",
      "primary": "#2196f3",
      "secondary": "#1565c0",
      "highlight": "#ff4081",
      "border": "#e0e0e0",
      "muted": "#f5f5f5"
    },
    "layout": {
      "centered": true,
      "bannerHeight": "80vh",
      "maxWidth": 896
    }
  },
  "content": [
    {
      "component": "nav",
      "links": [
        {
          "href": "http://Kikobeats.github.io/svr/",
          "text": "Home"
        },
        {
          "href": "https://github.com/Kikobeats/svr",
          "text": "GitHub"
        },
        {
          "href": "https://npmjs.com/package/svr",
          "text": "npm"
        }
      ]
    },
    {
      "component": "header",
      "heading": "svr",
      "subhead": "Hot Module Replacement for HTTP Server",
      "children": [
        {
          "component": "ui/TweetButton",
          "text": "svr: Hot Module Replacement for HTTP Server",
          "url": "http://Kikobeats.github.io/svr/"
        },
        {
          "component": "ui/GithubButton",
          "user": "Kikobeats",
          "repo": "svr"
        }
      ],
      "text": "v0.4.0"
    },
    {
      "component": "article",
      "metadata": {
        "source": "github.readme"
      },
      "html": "<h1>\n  <br>\n  <img src=\"/static/logo.png\">\n  <br>\n  <br>\n</h1>\n\n<p><img src=\"https://img.shields.io/github/tag/Kikobeats/svr.svg?style=flat-square\">\n<a href=\"https://travis-ci.org/Kikobeats/svr\"><img src=\"https://img.shields.io/travis/Kikobeats/svr/master.svg?style=flat-square\"></a>\n<a href=\"https://coveralls.io/github/Kikobeats/svr\"><img src=\"https://img.shields.io/coveralls/Kikobeats/svr.svg?style=flat-square\"></a>\n<a href=\"https://david-dm.org/Kikobeats/svr\"><img src=\"https://img.shields.io/david/Kikobeats/svr.svg?style=flat-square\"></a>\n<a href=\"https://david-dm.org/Kikobeats/svr#info=devDependencies\"><img src=\"https://img.shields.io/david/dev/Kikobeats/svr.svg?style=flat-square\"></a>\n<a href=\"https://www.npmjs.org/package/svr\"><img src=\"https://img.shields.io/npm/dm/svr.svg?style=flat-square\"></a>\n<a href=\"https://paypal.me/Kikobeats\"><img src=\"https://img.shields.io/badge/donate-paypal-blue.svg?style=flat-square\"></a></p>\n<blockquote>\n<p>Hot Module replacement (HMR) capabilities for any HTTP Server.</p>\n</blockquote>\n<p>The idea behind this project is <strong>smart reload</strong>, avoiding reload completely the process. It just reload the code that changes!</p>\n<p>It&apos;s similar <a href=\"https://github.com/zeit/micro-dev\">micro-dev</a>, but out of the box for any framework that use <a href=\"https://nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback\">http.Server.listen()</a> interface.</p>\n<h2>Installation</h2>\n<p>You can install it as global</p>\n<pre>$ npm install svr --global</pre><p>Or use it as part of your development workflow as a <code>devDependency</code>:</p>\n<pre>$ npm install svr --save-dev</pre><h2>Usage</h2>\n<h3>Getting Started</h3>\n<p>After installation, just call it:</p>\n<pre>$ svr</pre><p>We recommend add <strong>svr</strong> as npm script:</p>\n<pre>{\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;dev&quot;</span>: <span class=\"hljs-string\">&quot;srv&quot;</span>\n  }\n}</pre><p>Now, running <code>npm run dev</code> it will be start your HRM development server:</p>\n<pre>$ npm start\n\n  &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;\n  &#x2502;                                                   &#x2502;\n  &#x2502;   my-express-api is running!                      &#x2502;\n  &#x2502;                                                   &#x2502;\n  &#x2502;   &#x2022; Local:            http://localhost:3000       &#x2502;\n  &#x2502;   &#x2022; On Your Network:  http://192.168.1.106:3000   &#x2502;\n  &#x2502;                                                   &#x2502;\n  &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;</pre><p><strong>svr</strong> is assuming you have a <code>main</code> file declared in your <code>package.json</code> in the project directory.</p>\n<p>Otherwise, you can provide the file path as first argument:</p>\n<pre>$ svr src/server/routes.js</pre><p>The only requirement is define the main file of your server as exported function that follow this interface:</p>\n<pre><span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">app, express</span>) =&gt;</span> {\n<span class=\"hljs-comment\">/* your awesome code here */</span>\n}</pre><p>If your project directory is different from the current directory you can specify it as well using <code>-d</code> or <code>--cwd</code> flag:</p>\n<pre>$ svr src/server/routes.js --cwd=~/Projects/my-express-api</pre><p>Type  <code>svr --help</code> to get all the information.</p>\n<h3>Watching for changes</h3>\n<p>After start, whatever file modification in the project directory will be listened by <strong>svr</strong> automagically:</p>\n<pre>  &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;\n  &#x2502;                                                   &#x2502;\n  &#x2502;   my-express-api is running!                      &#x2502;\n  &#x2502;                                                   &#x2502;\n  &#x2502;   &#x2022; Local:            http://localhost:3000       &#x2502;\n  &#x2502;   &#x2022; On Your Network:  http://192.168.1.106:3000   &#x2502;\n  &#x2502;                                                   &#x2502;\n  &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;\n\n   &#x2139; 18:32:42 modified index.js</pre><p>If you need to reload the server on demand, just type <code>rs</code>:</p>\n<pre>  &#x250C;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2510;\n  &#x2502;                                                   &#x2502;\n  &#x2502;   my-express-api is running!                      &#x2502;\n  &#x2502;                                                   &#x2502;\n  &#x2502;   &#x2022; Local:            http://localhost:3000       &#x2502;\n  &#x2502;   &#x2022; On Your Network:  http://192.168.1.106:3000   &#x2502;\n  &#x2502;                                                   &#x2502;\n  &#x2514;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2500;&#x2518;\n\n   &#x2139; 18:32:42 modified index.js\n   rs\n   &#x2139; 18:34:07 restart index.js</pre><p><strong>svr</strong> only will be listen files in the current directory by default.</p>\n<p>You can use <code>-w</code> or <code>--watch</code> to add more file path to be listened</p>\n<pre>$ svr src/server/routes.js</pre><p>Type  <code>svr --help</code> to get all the information.</p>\n<h3>Ignoring files</h3>\n<p><strong>svr</strong> takes into consideration ignore non relevant files.</p>\n<p>By default, it will be to ignore:</p>\n<ul>\n<li>well known files to ignore, like <code>node_modules</code>, <code>.git</code>, etc.</li>\n<li><code>.gitignore</code> declarations.</li>\n<li><code>ignored</code> field in your <code>package.json</code>.</li>\n</ul>\n<p>You can declare:</p>\n<ul>\n<li>Relative or absolute paths.</li>\n<li>Glob patterns.</li>\n</ul>\n<p>If you need to add a specific file to ignore, use <code>i</code>  or <code>--ignore</code> flag:</p>\n<pre>$ svr -i .cache -i public</pre><h2>Tips</h2>\n<h3>Development Server</h3>\n<p>This could be a good start point for a HTTP server:</p>\n<pre><span class=\"hljs-keyword\">const</span> isProduction = process.env.NODE_ENV === <span class=\"hljs-string\">&apos;production&apos;</span>\n\n<span class=\"hljs-built_in\">module</span>.exports = <span class=\"hljs-function\">(<span class=\"hljs-params\">app, express</span>) =&gt;</span> {\n  <span class=\"hljs-comment\">/* here you can do whatever you want */</span>\n  app\n    .use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;helmet&apos;</span>)())\n    .use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;compression&apos;</span>)())\n    .use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;cors&apos;</span>)())\n    .use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;jsendp&apos;</span>)())\n    .use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;express-status-monitor&apos;</span>)())\n    .use(bodyParser.urlencoded({ <span class=\"hljs-attr\">extended</span>: <span class=\"hljs-literal\">true</span> }))\n    .use(bodyParser.json())\n    .use(<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;morgan&apos;</span>)(isProduction ? <span class=\"hljs-string\">&apos;combined&apos;</span> : <span class=\"hljs-string\">&apos;dev&apos;</span>))\n    .use(express.static(<span class=\"hljs-string\">&apos;static&apos;</span>))\n    .disable(<span class=\"hljs-string\">&apos;x-powered-by&apos;</span>)\n\n  app.get(<span class=\"hljs-string\">&apos;/&apos;</span>, <span class=\"hljs-keyword\">async</span> <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">req, res</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> res.send(<span class=\"hljs-string\">&apos;hello world&apos;</span>)\n  })\n\n  <span class=\"hljs-keyword\">return</span> app\n}</pre><h3>Production Server</h3>\n<p><strong>svr</strong> is oriented just for development scenarios.</p>\n<p>Under production, simply create the boostraping server that you need.</p>\n<p>For example, you can take this <code>server.js</code> as production server:</p>\n<pre><span class=\"hljs-meta\">&apos;use strict&apos;</span>\n\n<span class=\"hljs-keyword\">const</span> express = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;express&apos;</span>)\n\n<span class=\"hljs-keyword\">const</span> app = express()\n\n<span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;./index&apos;</span>)(app, express)\n\n<span class=\"hljs-keyword\">const</span> port = process.env.PORT || process.env.port || <span class=\"hljs-number\">3000</span>\n<span class=\"hljs-keyword\">const</span> { name } = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">&apos;../package.json&apos;</span>)\n\napp.listen(port, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\"></span>) </span>{\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">`<span class=\"hljs-subst\">${name}</span> is running at http://localhost:<span class=\"hljs-subst\">${port}</span>`</span>)\n})</pre><p>Just add it as <code>npm start</code> script</p>\n<pre>{\n  <span class=\"hljs-attr\">&quot;scripts&quot;</span>: {\n    <span class=\"hljs-attr\">&quot;start&quot;</span>: <span class=\"hljs-string\">&quot;node server.js&quot;</span>\n  }\n}</pre><p>That&apos;s all.</p>\n<h2>License</h2>\n<p>MIT &#xA9; <a href=\"https://github.com/Kikobeats\">Kiko Beats</a>.</p>\n"
    },
    {
      "component": "footer",
      "links": [
        {
          "href": "https://github.com/Kikobeats/svr",
          "text": "GitHub"
        },
        {
          "href": "https://github.com/Kikobeats",
          "text": "Kikobeats"
        }
      ]
    }
  ]
}